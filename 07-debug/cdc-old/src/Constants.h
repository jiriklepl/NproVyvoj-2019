#ifndef CONSTANTS_H_
#define CONSTANTS_H_

extern int NOISE_RATE;
extern float MIN_X;
extern float MIN_Y;
extern float MAX_X;
extern float MAX_Y;
extern float MIN_Z;
extern float MAX_Z;
extern float PROXIMITY_RADIUS;
extern float GOOD_VOXEL_SIZE;

extern int SIMULATOR_PRIORITY;
extern int DETECTOR_STARTUP_PRIORITY;
extern int DETECTOR_PRIORITY;
extern long PERSISTENT_DETECTOR_SCOPE_SIZE;
extern long DETECTOR_PERIOD;
extern long TRANSIENT_DETECTOR_SCOPE_SIZE;

extern int MAX_FRAMES;

extern int TIME_SCALE;
extern int FPS;
extern int BUFFER_FRAMES;
extern int PRESIMULATE;
extern int SIMULATE_ONLY;
extern char* DETECTOR_STATS;
extern char* SIMULATOR_STATS;
extern char* DETECTOR_RELEASE_STATS;
//run a SPEC jvm98 benchmark to generate some noise
extern char* SPEC_NOISE_ARGS;
extern int USE_SPEC_NOISE;
extern int DETECTOR_NOISE_REACHABLE_POINTERS;
extern int DETECTOR_NOISE_ALLOCATE_POINTERS;
extern int DETECTOR_NOISE_ALLOCATION_SIZE;
extern int DETECTOR_NOISE_VARIABLE_ALLOCATION_SIZE;
extern int DETECTOR_NOISE_ALLOCATION_SIZE_INCREMENT;
extern int DETECTOR_NOISE_MIN_ALLOCATION_SIZE;
extern int DETECTOR_NOISE_MAX_ALLOCATION_SIZE;
extern int DETECTOR_STARTUP_OFFSET_MILLIS;
extern int DETECTOR_NOISE;
// write down the FRAMES into the frame.bin file
extern int FRAMES_BINARY_DUMP;

// this is only for debugging of the detector code
//
// each frame generated by the simulator is processed exactly once by
// the detector ; this also turns on some debugging features
//
// the results thus should be deterministic
extern int SYNCHRONOUS_DETECTOR;

extern int DUMP_RECEIVED_FRAMES;
extern int DUMP_SENT_FRAMES;
extern int DEBUG_DETECTOR;

#endif /* CONSTANTS_H_ */
